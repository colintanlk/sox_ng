#! /bin/sh

# Convert .md files into .html for viewing with a web browser
#
# Can be run in the issues/ directory or in the top level directory.

# The sed scripts convert [Link](Link) to [Link](Link.html)
# but not for http:// links (which contain a colon and slashes)
# nor for image files (which live in a subdir and contain a slash and a dot)
# nor for patch files (which contain a dot)

# multimarkdown https://fletcherpenney.net/multimarkdown
# can be obtained from https://github.com/fletcher/MultiMarkdown-6/releases
# and its output is naked HTML with no <head> or <body> tags.
# so we wrap that in a simple template.

echo '' | multimarkdown > /dev/null || {
    {
	echo "You need to install multimarkdown to run makehtml.sh"
	echo "Fedora/Red Hat/Centos: yum install multimarkdown"
	echo "Debian/Ubuntu/Mint: apt install libtext-multimarkdown-perl"
	echo "or get the latest version from"
	echo "https://fletcherpenney.net/multimarkdown" or
	echo "https://github.com/fletcher/MultiMarkdown-6/releases"
    } 1>&2
    exit 1
}

if [ -z "$(ls *.md 2> /dev/null)" ]
then
    echo "Fetching issues..."
    sh getissues.sh -c
fi

# Let them run it in the "issues" directory or from the top-level directory
if [ -d issues ]
then
    cd issues
fi
# Make sure they are in an "issues" directory
if [ "$(basename "$(pwd)")" != issues ]
then
    echo 'makehtml.sh needs to run in an "issues" directory'
    echo 'or where there is an "issues" directory.'
    exit 1
fi

# An "echo" that never treats \ specially
echo() {
    printf '%s\n' "$*"
}

# When including an issue name or file name in HTML code,
# escape <, ", & and \ (and > for good measure)
hprotect ()
{
    # Do & first so it doesn't mess up the other escape sequences
    echo "$1" | sed 's/&/\&amp;/g
		     s/</\&lt;/g
		     s/>/\&gt;/g
		     s/"/\&quot;/g
		     s/\\/\&bsol;/g'
}

# When including a file or directory name in a URL, escape
# "unsafe/unwise" characters: "{", "}", "|", "\", "^", "~", "[", "]", and "`"
# "reserved" characters:  ";", "/", "?", ":", "@", "=" and "&"
# "excluded" character:  " ", "<", ">", "#", "%", """ and control characters
# See RFC1738 and RFC2396.
# "/" should never occur because we map / to \ to have a valid Unix file name
# but we include it anyway.
# UTF8 characters' top bits are always set, but test this.
# As for control characters...
uprotect ()
{
    # Do % first so as not to mess up the other escape sequences
    echo "$1" | sed 's/%/%25/g
		     s/\t/%09/g
		     s/"/%22/g
		     s/#/%23/g
		     s/ /%20/g
		     s/&/%26/g
		     s/\//%2F/g
		     s/:/%3A/g
		     s/;/%3B/g
		     s/</%3C/g
		     s/=/%3D/g
		     s/>/%3E/g
		     s/?/%3F/g
		     s/@/%40/g
		     s/\[/%5B/g
		     s/\\/%5C/g
		     s/\]/%5D/g
		     s/\^/%5E/g
		     s/`/%60/g
		     s/{/%7B/g
		     s/|/%7C/g
		     s/}/%7D/g
		     s/~/%7E/g'
}

# Generate each issue's page
for mdfile in *.md
do
    test ! -f "$mdfile" && continue
    title="$(basename "$mdfile" .md)"
    # Version to use when included in HTML
    htitle="$(hprotect "$title")"
    number=; state=; milestone=; labels=
    test -f "$title/number"    && number="$(cat "$title/number")"
    test -f "$title/state"     && state="$(cat "$title/state")"
    test -f "$title/milestone" && milestone="$(cat "$title/milestone")"
    test -f "$title/labels"    && labels="$(cat "$title/labels")"
    test -z "$state" && state=open
    test "$milestone" = "null" && milestone=
    {
	# Imitate the format of the forgego issue pages
	echo "<html><head>"
	if [ -z "$number" ]
	then echo "<title>$htitle - sox_ng/sox_ng</title>"
	else echo "<title>#$number - $htitle - sox_ng/sox_ng</title>"
	fi
	echo "</head><body>"
	if [ -z "$number" ]
	then echo "<p>sox_ng issue - $htitle"
	else echo "<p>sox_ng issue #$number - $htitle"
	fi
	echo "<br>State: $state"
	test -n "$milestone" && echo "<br>Milestone: $milestone"
	test -n "$labels" && echo "<br>Labels: $labels"
	echo '</p><hr>'
	sed 's/  /    /g' "$mdfile" | multimarkdown | \
	sed 's/href="\([-A-Za-z0-9]*\)"/href="\1.html"/g' | \
	sed 's/<table>/<table border=1 cellspacing=0>/'
	# List the attachments
	tmp=$(mktemp)
	ls -A "$title" | grep -Ev '^(state|milestone|labels|number|id)$' > $tmp
	if [ -s $tmp ]
	then
	    echo "<hr>"
	    cat $tmp | while read file
	    do
		hfile="$(hprotect "$file")"
		ufile="$(uprotect "$file")"
		utitle="$(uprotect "$file")"
		size="$(stat -c %s "$title/$file")"
		echo "[<u>&darr;</u>] <a target=_blank \
		    title=\"Click to see &#34;$hfile&#34; in a new tab\" \
		    href=\"$utitle/$ufile\"><strong>$hfile</strong></a> ($size bytes)<br>"
	    done
	fi

	echo "<hr>Generated by <a href=\"https://codeberg.org/sox_ng/sox_ng/src/branch/main/issues/makehtml.sh\"><TT>makehtml.sh</TT></a> on $(date -u)"
	echo "</body></html>"
    } > "$(echo "$mdfile" | sed 's/\.md$//').html"
done

# Generate the HTML for the open or closed issues
# Usage: "makeindex open" or "makeindex closed"
makeindex() {
    state="$1"
    case "$state" in
    open|closed) ;;
    *) echo "Internal error: makeindex($1)"; exit 1;;
    esac

    # Uppercase the first letter
    h2="$(echo $state | sed 's/./\u&/')"
    echo "  <h2>$h2</h2>"
    echo "  <ul>"

    # We need to generate the list of issues and then process them
    # to be able to sort them into reverse numerical order.
    for mdfile in *.md
    do
	# Guard against issues whose title ends in ".md"
	test ! -f "$mdfile" && continue

	title="$(basename "$mdfile" .md)"

	# Skip issues that are not open. Issues with no state are open.
	case $state in
	open) # Skip if closed
	    if [ -f "$title"/state ] && [ open != "$(cat "$title"/state)" ]
	    then continue
	    fi;;
	closed) # Skip if open
	    if [ ! -f "$title"/state ] || [ closed != "$(cat "$title"/state)" ]
	    then continue
	    fi;;
	esac
	number="$(cat "$title/number" 2> /dev/null)"
	if [ -z "$number" ]
	then printf "?? "	# no number yet
	else printf "$number "
	fi
	echo "$title"
    done | sort -nr | while read -r number title
    do
	# First line
	htitle="$(hprotect "$title")"
	utitle="$(uprotect "$title")"
	echo "<li><a href=\"$utitle.html\">$htitle</a>"
	for label in $(cat "$title/labels" 2> /dev/null)
	do
	    printf " <small>%s</small>" "$label"
	done
	# Second line
	printf "<br><small>#$number"
	milestone="$(cat "$title/milestone" 2> /dev/null)"
	if [ -n "$milestone" ]
	then
	    printf " => %s" "$milestone"
	fi
	echo "</small>"
    done

    echo "  </ul>"
}

# Generate the index
{
echo "<html>
 <head><title>sox_ng issues</title></head>
 <body>
  <h1><a href="https://codeberg.org/sox_ng/sox_ng">sox_ng<A> issues</h1>"

# Show open issues
makeindex open

# Show closed issues if there are any.
# There will be none of getissues.sh was not run with -c
if cat */state 2>/dev/null | grep -q closed
then
    makeindex closed
fi

echo "  <hr>Generated by <a href=\"https://codeberg.org/sox_ng/sox_ng/src/branch/main/issues/makehtml.sh\"><TT>makehtml.sh</TT></a> on $(date -u)"
echo " </body>"
echo "</html>"
} > index.html
